{
    "manifests": {
        "bauer-kirch/environment": {
            "manifest": {
                "copy-from-package": {
                    "docker/": "docker/"
                },
                "env": {
                    "#1": "WARNING: do not use values with variable replacements (e.g. ${MY_VAR}) in this file!",
                    "#2": "Docker will not replace them."
                },
                "docker-compose": {
                    "docker-compose.yml": {
                        "services": [
                            "nginx:",
                            "  image: nginx:latest",
                            "  ports:",
                            "    - ${PORT_NGINX}:80",
                            "    - ${PORT_NGINX_SSL}:443",
                            "    - ${PORT_PREVIEW_B8K_SSL}:443",
                            "  volumes:",
                            "    - ./public:/var/www/public:cached",
                            "    - ./var/certs:/etc/ssl/certs:cached",
                            "    - ./var/nginx-include.d:/etc/nginx/include.d:cached",
                            "",
                            "php:",
                            "  image: 'gitlab.lan.bauer-kirch.de:5001/eap/php/docker/php:8.1'",
                            "  volumes:",
                            "    - ./:/var/www/:cached",
                            "    - ./docker/php/container-started.sh:/var/www/bin/container-started.sh",
                            "    - ${COMPOSER_CACHE_PATH}:/var/www/.composer/cache:cached",
                            "  environment:",
                            "    CONTAINER_STARTED: /var/www/bin/container-started.sh",
                            "    HISTFILE: /var/www/app/var/.bash_history",
                            "    PHP_XDEBUG_REMOTE_HOST: '${PHP_XDEBUG_REMOTE_HOST:-host.docker.internal}'",
                            "    # Move the Symfony cache dir outside the docker mount to improve performance",
                            "    # https://symfony.com/doc/current/configuration/override_dir_structure.html#override-the-cache-directory",
                            "    APP_CACHE_DIR: /tmp/symfony_cache",
                            "  env_file: .env",
                            "",
                            "webpack:",
                            "  image: 'gitlab.lan.bauer-kirch.de:5001/eap/php/docker-aux/webpack:latest'",
                            "  volumes:",
                            "    - ./:/var/www/:cached",
                            "    - npm-cache:/root/.npm:cached",
                            "  env_file: .env",
                            "",
                            "mailcatcher:",
                            "  image: 'gitlab.lan.bauer-kirch.de:5001/eap/php/docker-aux/mailhog:latest'",
                            ""
                        ],
                        "volumes": [
                            "npm-cache:"
                        ]
                    }
                }
            },
            "files": {
                "docker/build-resources": {
                    "contents": [
                        "#!/usr/bin/env bash",
                        "",
                        "# Paths and configuration",
                        "BASEDIR=\"$(cd \"$(dirname \"$0\")/..\" && pwd)\"",
                        "DOT_ENV=$BASEDIR/.env",
                        "",
                        "docker run \\",
                        "  --user $(id -u):$(id -g) \\",
                        "  --workdir /var/www/app \\",
                        "  --env-file $DOT_ENV \\",
                        "  --env NPM_CONFIG_CACHE=/var/www/app/var/volumes/.npm \\",
                        "  --rm \\",
                        "  -v $BASEDIR/app:/var/www/app \\",
                        "  node:12 \\",
                        "  bash -c \"npm install; npm run build\"",
                        ""
                    ],
                    "executable": true
                },
                "docker/ci-cert": {
                    "contents": [
                        "#!/usr/bin/env bash",
                        "",
                        "# Paths and configuration",
                        "BASEDIR=\"$(cd \"$(dirname \"$0\")/..\" && pwd)\"",
                        "CERTS_DIR=$BASEDIR/var/certs",
                        "",
                        "# Create certificate using nginx image",
                        "mkdir -p $CERTS_DIR",
                        "docker run \\",
                        "  --rm \\",
                        "  --entrypoint openssl \\",
                        "  -v $CERTS_DIR:/var/www/certs \\",
                        "  -w /var/www/certs \\",
                        "  nginx:latest \\",
                        "  req -newkey rsa:4096 \\",
                        "    -x509 \\",
                        "    -sha256 \\",
                        "    -days 365 \\",
                        "    -nodes \\",
                        "    -subj \"/CN=localhost\" \\",
                        "    -out app-cert.pem \\",
                        "    -keyout app-key.pem"
                    ],
                    "executable": true
                },
                "docker/ci-update-permissions": {
                    "contents": [
                        "#!/usr/bin/env bash",
                        "",
                        "# Paths and configuration",
                        "BASEDIR=\"$(cd \"$(dirname \"$0\")/..\" && pwd)\"",
                        "DOT_ENV=$BASEDIR/.env",
                        "",
                        "# make sure the cypress/screenshots and cypress/videos files are owned by gitlab-runner user",
                        "USER_ID=$(id -u)",
                        "GROUP_ID=$(id -g)",
                        "docker run \\",
                        "  --workdir /var/www/app \\",
                        "  --env-file $DOT_ENV \\",
                        "  --env NPM_CONFIG_CACHE=/var/www/app/var/volumes/.npm \\",
                        "  --rm \\",
                        "  -v $BASEDIR/app:/var/www/app \\",
                        "  node:12 \\",
                        "  bash -c \"chown -R $USER_ID:$GROUP_ID cypress/\"",
                        ""
                    ],
                    "executable": true
                },
                "docker/cli": {
                    "contents": [
                        "#!/usr/bin/env bash",
                        "",
                        "docker-compose exec \"${@:2}\" ${1-php} bash"
                    ],
                    "executable": true
                },
                "docker/composer": {
                    "contents": [
                        "#!/usr/bin/env bash",
                        "",
                        "docker-compose exec php composer \"$@\""
                    ],
                    "executable": true
                },
                "docker/console": {
                    "contents": [
                        "#!/usr/bin/env bash",
                        "",
                        "docker-compose exec php bin/console \"$@\""
                    ],
                    "executable": true
                },
                "docker/cypress": {
                    "contents": [
                        "#!/usr/bin/env bash",
                        "",
                        "# Paths and configuration",
                        "BASEDIR=\"$(cd \"$(dirname \"$0\")/..\" && pwd)\"",
                        "DOT_ENV=$BASEDIR/.env",
                        "",
                        "# Load Env files",
                        "test -f $DOT_ENV && source $DOT_ENV",
                        "",
                        "if [ \"$1\" = \"open\" ]; then",
                        "  UI_ARGUMENTS=\"--env DISPLAY \\",
                        "    -v /tmp/.X11-unix:/tmp/.X11-unix \\",
                        "    -v /var/run/dbus/system_bus_socket:/var/run/dbus/system_bus_socket\"",
                        "else",
                        "  UI_ARGUMENTS=\"\"",
                        "fi",
                        "",
                        "CYPRESS_ARGUMENTS=\"${@:2}\"",
                        "",
                        "# install dependencies",
                        "docker run \\",
                        "  --workdir /var/www/app \\",
                        "  --env-file $DOT_ENV \\",
                        "  --env NPM_CONFIG_CACHE=/var/www/app/var/volumes/.npm \\",
                        "  --rm \\",
                        "  -v $BASEDIR/app:/var/www/app \\",
                        "  node:12 \\",
                        "  bash -c \"time npm install\"",
                        "",
                        "# automatically runs as root; the created files (cypress/screenshots & cypress/videos) therefore belong to root",
                        "# needs to be updated later in job's after_script",
                        "docker run \\",
                        "  --ipc=host \\",
                        "  --network ${COMPOSE_PROJECT_NAME}_default \\",
                        "  --workdir /var/www/app \\",
                        "  --env-file $DOT_ENV \\",
                        "  --env CYPRESS_BASE_URL=https://nginx \\",
                        "  --rm \\",
                        "  --entrypoint cypress \\",
                        "  -v $BASEDIR/app:/var/www/app \\",
                        "  -v $BASEDIR/var/volumes/.npm:/root/.npm \\",
                        "  $UI_ARGUMENTS \\",
                        "  cypress/included:5.2.0 \\",
                        "  $1 --project /var/www/app $CYPRESS_ARGUMENTS",
                        ""
                    ],
                    "executable": true
                },
                "docker/mkcert": {
                    "contents": [
                        "#!/usr/bin/env bash",
                        "",
                        "# Paths and configuration",
                        "BASEDIR=\"$(cd \"$(dirname \"$0\")/..\" && pwd)\"",
                        "CERTS_DIR=$BASEDIR/var/certs",
                        "DOT_ENV=$BASEDIR/.env",
                        "DOT_ENV_LOCAL=$BASEDIR/.env.local",
                        "",
                        "# Load Env files",
                        "test -f $DOT_ENV && source $DOT_ENV",
                        "test -f $DOT_ENV_LOCAL && source $DOT_ENV_LOCAL",
                        "",
                        "# Create certificates",
                        "mkdir -p $CERTS_DIR",
                        "mkcert -key-file $CERTS_DIR/app-key.pem -cert-file $CERTS_DIR/app-cert.pem localhost 127.0.0.1 ::1 $MKCERT_CUSTOM_HOSTS"
                    ],
                    "executable": true
                },
                "docker/npm": {
                    "contents": [
                        "#!/usr/bin/env bash",
                        "",
                        "docker-compose exec webpack npm \"$@\""
                    ],
                    "executable": true
                },
                "docker/php/Dockerfile": {
                    "contents": [
                        "FROM gitlab.lan.bauer-kirch.de:5001/eap/php/docker/php:php-8.1",
                        "",
                        "# Add your custom apt packages, php or pecl extensions here",
                        ""
                    ],
                    "executable": false
                },
                "docker/php/container-started.sh": {
                    "contents": [
                        "#!/usr/bin/env bash",
                        "",
                        "wait-for-it.sh mariadb:3306",
                        "bin/console doctrine:migrations:migrate --no-interaction",
                        ""
                    ],
                    "executable": true
                },
                "docker/phpstan": {
                    "contents": [
                        "#!/usr/bin/env bash",
                        "",
                        "docker-compose exec -T php vendor/bin/phpstan analyse -c phpstan.neon"
                    ],
                    "executable": true
                },
                "docker/phpunit": {
                    "contents": [
                        "#!/usr/bin/env bash",
                        "",
                        "docker-compose exec -T php php bin/phpunit"
                    ],
                    "executable": true
                },
                "docker/wait-for-200.sh": {
                    "contents": [
                        "#!/bin/bash",
                        "",
                        "# source: https://github.com/stefan-evinance/wait-for-200/blob/master/wait-for-200.sh",
                        "",
                        "TIMEOUT=\"${TIMEOUT:-60}\"",
                        "seconds=0",
                        "",
                        "echo 'Waiting up to' $TIMEOUT 'seconds for HTTP 200 from' $1",
                        "until [ \"$seconds\" -gt \"$TIMEOUT\" ] || $(curl -k --output /dev/null --silent --max-time $TIMEOUT --head --fail $1); do",
                        "  printf '.'",
                        "  sleep 2",
                        "  seconds=$((seconds+2))",
                        "done",
                        "",
                        "if [ \"$seconds\" -lt \"$TIMEOUT\" ]; then",
                        "  echo 'OK'",
                        "else",
                        "  echo \"ERROR: Timed out wating for HTTP 200 from\" $1 >&2",
                        "  exit 1",
                        "fi"
                    ],
                    "executable": true
                },
                "docker/wsl2-network-private.ps1": {
                    "contents": [
                        "# WSL2 network port forwarding script that removes app exposure to 0.0.0.0",
                        "# (based on https://gist.github.com/daehahn/497fa04c0156b1a762c70ff3f9f7edae)",
                        "",
                        "./wsl2-network-public.ps1 delete"
                    ],
                    "executable": false
                },
                "docker/wsl2-network-public.ps1": {
                    "contents": [
                        "# WSL2 network port forwarding script that exposes the app to 0.0.0.0",
                        "# (based on https://gist.github.com/daehahn/497fa04c0156b1a762c70ff3f9f7edae)",
                        "",
                        "# If elevation needed, start new process",
                        "If (-NOT ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator))",
                        "{",
                        "  # Relaunch as an elevated process:",
                        "  Start-Process powershell.exe \"-File\",('\"{0}\"' -f $MyInvocation.MyCommand.Path),\"$Args runas\" -Verb RunAs",
                        "  exit",
                        "}",
                        "",
                        "# You should modify '$Ports' for your applications",
                        "$Ports = (6443)",
                        "",
                        "# Check WSL ip address",
                        "wsl hostname -I | Set-Variable -Name \"WSL\"",
                        "$WSL = $WSL.split(\" \")[0];",
                        "$found = $WSL -match '\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}';",
                        "if (-not $found) {",
                        "  echo \"WSL2 cannot be found. Terminate script.\";",
                        "  exit;",
                        "}",
                        "",
                        "# Add each port into portproxy",
                        "$Addr = \"0.0.0.0\"",
                        "Foreach ($Port in $Ports) {",
                        "    netsh interface portproxy delete v4tov4 listenaddress=$Addr listenport=$Port | Out-Null",
                        "    if ($Args[0] -ne \"delete\") {",
                        "        netsh interface portproxy add v4tov4 listenaddress=$Addr listenport=$Port connectaddress=$WSL connectport=$Port | Out-Null",
                        "    }",
                        "}",
                        "",
                        "# Display all portproxy information",
                        "echo \"Active portproxy rules:\"",
                        "netsh interface portproxy show v4tov4;",
                        "",
                        "# Give user to chance to see above list when relaunched start",
                        "If ($Args[0] -eq \"runas\" -Or $Args[1] -eq \"runas\") {",
                        "  Write-Host -NoNewLine 'Press any key to close! ';",
                        "  $null = $Host.UI.RawUI.ReadKey('NoEcho,IncludeKeyDown');",
                        "}"
                    ],
                    "executable": false
                }
            },
            "ref": "01f54e43b0db0f27c1d313ae78b1bfaac9f240bc"
        }
    }
}
