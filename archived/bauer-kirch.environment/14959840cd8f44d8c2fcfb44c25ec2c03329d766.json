{
    "manifests": {
        "bauer-kirch/environment": {
            "manifest": {
                "gitignore": [
                    "/.composer"
                ],
                "copy-from-recipe": {
                    ".gitlab-ci/": ".gitlab-ci/",
                    "docker/": "docker/",
                    ".gitlab-ci.yml": ".gitlab-ci.yml",
                    ".gitkeep": "/var/certs/.gitkeep"
                },
                "docker-compose": {
                    "docker-compose.yml": {
                        "services": [
                            "nginx:",
                            "  image: gitlab.lan.bauer-kirch.de:5001/eap/php/docker-aux/nginx:latest",
                            "  ports:",
                            "    - ${PORT_NGINX:-80}:80",
                            "    - ${PORT_NGINX_SSL:-443}:443",
                            "    - ${PORT_PREVIEW_B8K_SSL:-6443}:443",
                            "  volumes:",
                            "    - ./public:/var/www/app/public:cached",
                            "    - ./var/certs:/etc/ssl/certs:cached",
                            "",
                            "php:",
                            "  image: 'gitlab.lan.bauer-kirch.de:5001/eap/php/docker/php:php-8.1'",
                            "  volumes:",
                            "    - ./:/var/www/app/:cached",
                            "    - ./docker/php/container-started.sh:/var/www/bin/container-started.sh",
                            "    - ${COMPOSER_CACHE_PATH:-~/.cache/composer}:/var/www/app/.composer/cache:cached",
                            "  environment:",
                            "    CONTAINER_STARTED: /var/www/bin/container-started.sh",
                            "    HISTFILE: /var/www/app/var/.bash_history",
                            "    PHP_XDEBUG_REMOTE_HOST: '${PHP_XDEBUG_REMOTE_HOST:-host.docker.internal}'",
                            "    # Move the Symfony cache dir outside the docker mount to improve performance",
                            "    # https://symfony.com/doc/current/configuration/override_dir_structure.html#override-the-cache-directory",
                            "    APP_CACHE_DIR: /tmp/symfony_cache",
                            "",
                            "php_messenger:",
                            "  image: 'gitlab.lan.bauer-kirch.de:5001/eap/php/docker/php:php-8.1'",
                            "  volumes:",
                            "    - ./:/var/www/app/:cached",
                            "    - ./docker/php/php-messenger-consume.sh:/var/www/bin/php-messenger-consume.sh",
                            "    - ${COMPOSER_CACHE_PATH:-~/.cache/composer}:/var/www/app/.composer/cache:cached",
                            "  environment:",
                            "    CONTAINER_STARTED: /var/www/bin/container-started.sh",
                            "    APP_CACHE_DIR: /tmp/symfony_cache",
                            "  command: /var/www/bin/php-messenger-consume.sh",
                            "",
                            "mailhog:",
                            "  image: 'gitlab.lan.bauer-kirch.de:5001/eap/php/docker-aux/mailhog:latest'",
                            ""
                        ],
                        "volumes": [
                            "npm-cache:"
                        ]
                    }
                }
            },
            "files": {
                ".gitkeep": {
                    "contents": [
                        ""
                    ],
                    "executable": false
                },
                ".gitlab-ci.yml": {
                    "contents": [
                        "stages:",
                        "  - setup",
                        "  - test",
                        "  - build",
                        "  - audit",
                        "  - deploy",
                        "",
                        "include: '.gitlab-ci/*.yml'",
                        ""
                    ],
                    "executable": false
                },
                ".gitlab-ci/.gitkeep": {
                    "contents": [
                        ""
                    ],
                    "executable": false
                },
                "docker/cli": {
                    "contents": [
                        "#!/usr/bin/env bash",
                        "",
                        "docker-compose exec \"${@:2}\" ${1-php} bash"
                    ],
                    "executable": true
                },
                "docker/composer": {
                    "contents": [
                        "#!/usr/bin/env bash",
                        "",
                        "docker-compose exec php composer \"$@\""
                    ],
                    "executable": true
                },
                "docker/composer-symlink-package": {
                    "contents": [
                        "#!/usr/bin/env bash",
                        "",
                        "BASEDIR=\"$(cd \"$(dirname \"$0\")/..\" && pwd)\"",
                        "cd $BASEDIR",
                        "",
                        "echo \"Adding path repository $2\"",
                        "composer config repositories.$1 --json \"{\\\"type\\\": \\\"path\\\", \\\"url\\\": \\\"$2\\\", \\\"options\\\": {\\\"symlink\\\": true } }\"",
                        "",
                        "echo \"Symlink composer package $1 to local path $2\"",
                        "composer require $1",
                        ""
                    ],
                    "executable": true
                },
                "docker/mkcert": {
                    "contents": [
                        "#!/usr/bin/env bash",
                        "",
                        "# Paths and configuration",
                        "BASEDIR=\"$(cd \"$(dirname \"$0\")/..\" && pwd)\"",
                        "CERTS_DIR=$BASEDIR/var/certs",
                        "",
                        "# Create certificates",
                        "mkdir -p $CERTS_DIR",
                        "mkcert -key-file $CERTS_DIR/app-key.pem -cert-file $CERTS_DIR/app-cert.pem localhost 127.0.0.1 ::1 $1"
                    ],
                    "executable": true
                },
                "docker/php/Dockerfile": {
                    "contents": [
                        "FROM gitlab.lan.bauer-kirch.de:5001/eap/php/docker/php:php-8.1",
                        "",
                        "# Add your custom apt packages, php or pecl extensions here",
                        ""
                    ],
                    "executable": false
                },
                "docker/php/container-started.sh": {
                    "contents": [
                        "#!/usr/bin/env bash",
                        "",
                        "wait-for-it.sh database:3306",
                        "bin/console doctrine:migrations:migrate --no-interaction",
                        ""
                    ],
                    "executable": true
                },
                "docker/php/php-messenger-consume.sh": {
                    "contents": [
                        "#!/usr/bin/env bash",
                        "",
                        "set -e",
                        "",
                        "cd /var/www/app",
                        "",
                        "wait-for-200.sh https://nginx/_profiler",
                        "bin/console messenger:consume async -vv",
                        ""
                    ],
                    "executable": true
                },
                "docker/wait-for-200.sh": {
                    "contents": [
                        "#!/bin/bash",
                        "",
                        "# source: https://github.com/stefan-evinance/wait-for-200/blob/master/wait-for-200.sh",
                        "",
                        "TIMEOUT=\"${TIMEOUT:-60}\"",
                        "seconds=0",
                        "",
                        "echo 'Waiting up to' $TIMEOUT 'seconds for HTTP 200 from' $1",
                        "until [ \"$seconds\" -gt \"$TIMEOUT\" ] || $(curl -k --output /dev/null --silent --max-time $TIMEOUT --head --fail $1); do",
                        "  printf '.'",
                        "  sleep 2",
                        "  seconds=$((seconds+2))",
                        "done",
                        "",
                        "if [ \"$seconds\" -lt \"$TIMEOUT\" ]; then",
                        "  echo 'OK'",
                        "else",
                        "  echo \"ERROR: Timed out wating for HTTP 200 from\" $1 >&2",
                        "  exit 1",
                        "fi"
                    ],
                    "executable": true
                },
                "docker/wsl2-network-private.ps1": {
                    "contents": [
                        "# WSL2 network port forwarding script that removes app exposure to 0.0.0.0",
                        "# (based on https://gist.github.com/daehahn/497fa04c0156b1a762c70ff3f9f7edae)",
                        "",
                        "./wsl2-network-public.ps1 delete"
                    ],
                    "executable": false
                },
                "docker/wsl2-network-public.ps1": {
                    "contents": [
                        "# WSL2 network port forwarding script that exposes the app to 0.0.0.0",
                        "# (based on https://gist.github.com/daehahn/497fa04c0156b1a762c70ff3f9f7edae)",
                        "",
                        "# If elevation needed, start new process",
                        "If (-NOT ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator))",
                        "{",
                        "  # Relaunch as an elevated process:",
                        "  Start-Process powershell.exe \"-File\",('\"{0}\"' -f $MyInvocation.MyCommand.Path),\"$Args runas\" -Verb RunAs",
                        "  exit",
                        "}",
                        "",
                        "# You should modify '$Ports' for your applications",
                        "$Ports = (6443)",
                        "",
                        "# Check WSL ip address",
                        "wsl hostname -I | Set-Variable -Name \"WSL\"",
                        "$WSL = $WSL.split(\" \")[0];",
                        "$found = $WSL -match '\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}';",
                        "if (-not $found) {",
                        "  echo \"WSL2 cannot be found. Terminate script.\";",
                        "  exit;",
                        "}",
                        "",
                        "# Add each port into portproxy",
                        "$Addr = \"0.0.0.0\"",
                        "Foreach ($Port in $Ports) {",
                        "    netsh interface portproxy delete v4tov4 listenaddress=$Addr listenport=$Port | Out-Null",
                        "    if ($Args[0] -ne \"delete\") {",
                        "        netsh interface portproxy add v4tov4 listenaddress=$Addr listenport=$Port connectaddress=$WSL connectport=$Port | Out-Null",
                        "    }",
                        "}",
                        "",
                        "# Display all portproxy information",
                        "echo \"Active portproxy rules:\"",
                        "netsh interface portproxy show v4tov4;",
                        "",
                        "# Give user to chance to see above list when relaunched start",
                        "If ($Args[0] -eq \"runas\" -Or $Args[1] -eq \"runas\") {",
                        "  Write-Host -NoNewLine 'Press any key to close! ';",
                        "  $null = $Host.UI.RawUI.ReadKey('NoEcho,IncludeKeyDown');",
                        "}"
                    ],
                    "executable": false
                }
            },
            "ref": "14959840cd8f44d8c2fcfb44c25ec2c03329d766"
        }
    }
}
